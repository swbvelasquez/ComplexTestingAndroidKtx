plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'com.google.dagger.hilt.android'
}

android {
    namespace 'com.swbvelasquez.complextestingandroidktx'
    compileSdk 33

    defaultConfig {
        applicationId "com.swbvelasquez.complextestingandroidktx"
        minSdk 24
        targetSdk 33
        versionCode 1
        versionName "1.0"
        buildConfigField("String","API_KEY",API_KEY) // API KEY Configurada en gradle.propierties para pixibay

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    // Allow references to generated code
    kapt {
        correctErrorTypes = true
    }
}

//librerias terceros
def glide_version = "4.13.2"
def retrofit_version = "2.9.0"
def lifecycle_version = "2.5.1"
def coroutines_version = "1.6.4"
def activity_version = "1.6.1"
def fragment_version = "1.5.5"
def room_version = "2.4.3"
def dagger_hilt_version = "2.44"
def timber_version = "5.0.1"

//librerias de testing
def mockito_version = "5.3.1"
def dexmaker_version = "2.28.3"
def core_testing_version = "2.1.0"
def junit_version = "4.13.2"
def test_core_version = "1.5.0"
def truth_version = "1.0.1"
def hamcrest_version = "1.3"
def robolectric_version = "4.10"

//librerias default
def androidx_core_version = "1.9.0"
def appcompat_version = "1.5.1"
def material_version = "1.7.0"
def constraint_version = "2.1.4"

dependencies {
    // Configuracion necesaria para Timber
    implementation fileTree(dir: "libs", include: ["*.jar"])

    // Librerias default
    implementation "androidx.core:core-ktx:$androidx_core_version"
    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation "com.google.android.material:material:$material_version"
    implementation "androidx.constraintlayout:constraintlayout:$constraint_version"

    // Glide
    implementation "com.github.bumptech.glide:glide:$glide_version"
    annotationProcessor "com.github.bumptech.glide:compiler:$glide_version"

    // ViewModel (Permite utilizar scopes en los view models)
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"

    // Live Data (Permite utilizar live data con view model, corutinas, etc)
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"

    // Kotlin Activity (Accede a complementos para kotlin)
    implementation "androidx.activity:activity-ktx:$activity_version"

    // Kotlin Fragment (Accede a complementos para kotlin)
    implementation "androidx.fragment:fragment-ktx:$fragment_version"

    // Retrofit (Permite utilizar retrofit)
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"

    // Gson Retrofit (Permite utilizar gson con retrofit)
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"

    // Coroutines (Permite utilizar corutinas)
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

    // Room (Permite utilizar Room database)
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    // Kotlin Room (Permite utilizar corutinas con room)
    implementation("androidx.room:room-ktx:$room_version")

    // Dagger Hitl (Permite utilizar dagger hilt de google)
    implementation "com.google.dagger:hilt-android:$dagger_hilt_version"
    kapt "com.google.dagger:hilt-compiler:$dagger_hilt_version"

    // Timber (Permite hacer los logs mas robustos e intuitivos)
    implementation "com.jakewharton.timber:timber:$timber_version"

    //Testing

    // Test Core (Permite proporcionar funcionalidades para probar
    implementation "androidx.test:core:$test_core_version"

    // Junit (Permite hacer pruebas unitarias de codigo)
    testImplementation "junit:junit:$junit_version"
    androidTestImplementation "junit:junit:$junit_version"

    // Mockito (Permite hacer escenarios falsos para pruebas, similtar a mockk pero algo mas complicado)
    testImplementation "org.mockito:mockito-core:$mockito_version"
    androidTestImplementation "org.mockito:mockito-core:$mockito_version"

    // Dexmaker (Permite a Mockito apoyar con una implementacion alternativa de reflexion en lugar de la estandar)
    androidTestImplementation "com.linkedin.dexmaker:dexmaker-mockito:$dexmaker_version"

    // Coroutines (Permite probar corutinas)
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"

    // Live Data (Permite probar live data)
    testImplementation "androidx.arch.core:core-testing:$core_testing_version"
    androidTestImplementation "androidx.arch.core:core-testing:$core_testing_version"

    // Espresso (Permite hacer pruebas usando el emulador de android)
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

    // Truth (Permite que se entienda mejor las asersiones en las pruebas)
    testImplementation "com.google.truth:truth:$truth_version"
    androidTestImplementation "com.google.truth:truth:$truth_version"

    // Hamcrest (Permite utilizar matchers mas legibles, similar a Truth, se usa con Mockito o Junit)
    testImplementation "org.hamcrest:hamcrest-all:$hamcrest_version"

    // Robolectric (Permite ejecutar pruebas en una JVM en lugar de un dispositivo o emulador)
    testImplementation "org.robolectric:robolectric:$robolectric_version"
}